name: C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/build
          key: ${{ runner.os }}-build-${{ github.sha }}

  unit-tests:
    needs: build
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/build
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Run C++ unit tests
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure --test-dir tests/unit

  integration-tests:
    needs: unit-tests
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/build
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Run integration tests
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure --test-dir tests/integration

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Check C++ formatting
        run: |
          find . -name '*.cpp' -o -name '*.h' | xargs clang-format --dry-run -Werror

  coverage:
    needs: [unit-tests, integration-tests]
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install lcov
        run: sudo apt-get install -y lcov

      - name: Configure CMake with coverage
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON

      - name: Build with coverage
        run: cmake --build ${{github.workspace}}/build

      - name: Run tests with coverage
        working-directory: ${{github.workspace}}/build
        run: |
          ctest --output-on-failure
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./build/coverage.info
          fail_ci_if_error: true