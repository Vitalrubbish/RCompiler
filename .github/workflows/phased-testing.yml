name: Phased Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Cache build artifacts and test cases
        uses: actions/cache@v3
        with:
          path: |
            ${{github.workspace}}/build
            ${{github.workspace}}/testcases
          key: ${{ runner.os }}-build-${{ github.sha }}

  unit-tests:
    needs: build
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ${{github.workspace}}/build
            ${{github.workspace}}/testcases
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Setup test environment
        run: |
          mkdir -p ${{github.workspace}}/build/tests/unit/testcases
          cp -r ${{github.workspace}}/testcases/* ${{github.workspace}}/build/tests/unit/testcases/

      - name: Run C++ unit tests
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure --test-dir tests/unit

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust test environment
        run: |
          mkdir -p target/debug/testcases
          cp -r testcases/* target/debug/testcases/

      - name: Run Rust unit tests
        run: cargo test --lib

  integration-tests:
    needs: unit-tests
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ${{github.workspace}}/build
            ${{github.workspace}}/testcases
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Setup test environment
        run: |
          mkdir -p ${{github.workspace}}/build/tests/integration/testcases
          cp -r ${{github.workspace}}/testcases/* ${{github.workspace}}/build/tests/integration/testcases/

      - name: Run integration tests
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure --test-dir tests/integration

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust test environment
        run: |
          mkdir -p target/debug/testcases
          cp -r testcases/* target/debug/testcases/

      - name: Run Rust integration tests
        run: cargo test --test '*'

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Check C++ formatting
        run: |
          find . -name '*.cpp' -o -name '*.h' | xargs clang-format --dry-run -Werror

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Check Rust formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

  coverage:
    needs: [unit-tests, integration-tests]
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install lcov
        run: sudo apt-get install -y lcov

      - name: Configure CMake with coverage
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON

      - name: Build with coverage
        run: cmake --build ${{github.workspace}}/build

      - name: Setup test environment
        run: |
          mkdir -p ${{github.workspace}}/build/tests/unit/testcases
          mkdir -p ${{github.workspace}}/build/tests/integration/testcases
          cp -r ${{github.workspace}}/testcases/* ${{github.workspace}}/build/tests/unit/testcases/
          cp -r ${{github.workspace}}/testcases/* ${{github.workspace}}/build/tests/integration/testcases/

      - name: Run tests with coverage
        working-directory: ${{github.workspace}}/build
        run: |
          ctest --output-on-failure
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info

      - name: Install Rust with coverage support
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Setup Rust test environment
        run: |
          mkdir -p target/debug/testcases
          cp -r testcases/* target/debug/testcases/

      - name: Generate Rust coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path rust-coverage.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./build/coverage.info,./rust-coverage.info
          fail_ci_if_error: true