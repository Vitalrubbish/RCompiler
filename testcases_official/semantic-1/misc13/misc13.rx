/*
Test Package: Semantic-1
Test Target: misc
Author: Wenxin Zheng
Time: 2025-08-08
Verdict: Success
Comment: misc test, simple linked list node operations
*/

// Simple linked list node operations
// Basic linked list implementation with array simulation
struct ListNode {
    value: i32,
    next_index: i32,
}

struct SimpleList {
    nodes: [ListNode; 20],
    head: i32,
    size: i32,
    capacity: i32,
}

impl ListNode {
    fn new(val: i32) -> ListNode {
        ListNode {
            value: val,
            next_index: -1,
        }
    }
}

impl SimpleList {
    fn new() -> SimpleList {
        SimpleList {
            nodes: [ListNode::new(0); 20],
            head: -1,
            size: 0,
            capacity: 20,
        }
    }
    
    fn push_front(&mut self, value: i32) -> bool {
        if (self.size >= self.capacity) {
            return false;
        }
        
        let new_index = self.size;
        self.nodes[new_index as usize] = ListNode::new(value);
        self.nodes[new_index as usize].next_index = self.head;
        self.head = new_index;
        self.size += 1;
        return true;
    }
    
    fn pop_front(&mut self) -> i32 {
        if (self.head == -1) {
            return -1;
        }
        
        let value = self.nodes[self.head as usize].value;
        self.head = self.nodes[self.head as usize].next_index;
        self.size -= 1;
        return value;
    }
    
    fn get_size(&self) -> i32 {
        return self.size;
    }
}

fn main() {
    let mut list = SimpleList::new();
    let n = readInt();
    
    let mut i = 0;
    while (i < n) {
        let operation = readInt();
        
        if (operation == 1) {
            // Push operation
            let value = readInt();
            list.push_front(value);
        } else if (operation == 2) {
            // Pop operation
            let value = list.pop_front();
            printInt(value);
        } else if (operation == 3) {
            // Get size
            let size = list.get_size();
            printInt(size);
        }
        
        i += 1;
    }
    exit(0);
}
